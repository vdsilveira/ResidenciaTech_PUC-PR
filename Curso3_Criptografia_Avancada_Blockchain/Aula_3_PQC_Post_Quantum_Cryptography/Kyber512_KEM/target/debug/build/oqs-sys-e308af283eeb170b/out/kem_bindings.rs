/* automatically generated by rust-bindgen 0.60.1 */

pub const OQS_KEM_alg_bike_l1: &[u8; 8usize] = b"BIKE-L1\0";
pub const OQS_KEM_alg_bike_l3: &[u8; 8usize] = b"BIKE-L3\0";
pub const OQS_KEM_alg_classic_mceliece_348864: &[u8; 24usize] = b"Classic-McEliece-348864\0";
pub const OQS_KEM_alg_classic_mceliece_348864f: &[u8; 25usize] = b"Classic-McEliece-348864f\0";
pub const OQS_KEM_alg_classic_mceliece_460896: &[u8; 24usize] = b"Classic-McEliece-460896\0";
pub const OQS_KEM_alg_classic_mceliece_460896f: &[u8; 25usize] = b"Classic-McEliece-460896f\0";
pub const OQS_KEM_alg_classic_mceliece_6688128: &[u8; 25usize] = b"Classic-McEliece-6688128\0";
pub const OQS_KEM_alg_classic_mceliece_6688128f: &[u8; 26usize] = b"Classic-McEliece-6688128f\0";
pub const OQS_KEM_alg_classic_mceliece_6960119: &[u8; 25usize] = b"Classic-McEliece-6960119\0";
pub const OQS_KEM_alg_classic_mceliece_6960119f: &[u8; 26usize] = b"Classic-McEliece-6960119f\0";
pub const OQS_KEM_alg_classic_mceliece_8192128: &[u8; 25usize] = b"Classic-McEliece-8192128\0";
pub const OQS_KEM_alg_classic_mceliece_8192128f: &[u8; 26usize] = b"Classic-McEliece-8192128f\0";
pub const OQS_KEM_alg_hqc_128: &[u8; 8usize] = b"HQC-128\0";
pub const OQS_KEM_alg_hqc_192: &[u8; 8usize] = b"HQC-192\0";
pub const OQS_KEM_alg_hqc_256: &[u8; 8usize] = b"HQC-256\0";
pub const OQS_KEM_alg_kyber_512: &[u8; 9usize] = b"Kyber512\0";
pub const OQS_KEM_alg_kyber_768: &[u8; 9usize] = b"Kyber768\0";
pub const OQS_KEM_alg_kyber_1024: &[u8; 10usize] = b"Kyber1024\0";
pub const OQS_KEM_alg_kyber_512_90s: &[u8; 13usize] = b"Kyber512-90s\0";
pub const OQS_KEM_alg_kyber_768_90s: &[u8; 13usize] = b"Kyber768-90s\0";
pub const OQS_KEM_alg_kyber_1024_90s: &[u8; 14usize] = b"Kyber1024-90s\0";
pub const OQS_KEM_alg_ntru_hps2048509: &[u8; 18usize] = b"NTRU-HPS-2048-509\0";
pub const OQS_KEM_alg_ntru_hps2048677: &[u8; 18usize] = b"NTRU-HPS-2048-677\0";
pub const OQS_KEM_alg_ntru_hps4096821: &[u8; 18usize] = b"NTRU-HPS-4096-821\0";
pub const OQS_KEM_alg_ntru_hps40961229: &[u8; 19usize] = b"NTRU-HPS-4096-1229\0";
pub const OQS_KEM_alg_ntru_hrss701: &[u8; 14usize] = b"NTRU-HRSS-701\0";
pub const OQS_KEM_alg_ntru_hrss1373: &[u8; 15usize] = b"NTRU-HRSS-1373\0";
pub const OQS_KEM_alg_ntruprime_ntrulpr653: &[u8; 11usize] = b"ntrulpr653\0";
pub const OQS_KEM_alg_ntruprime_ntrulpr761: &[u8; 11usize] = b"ntrulpr761\0";
pub const OQS_KEM_alg_ntruprime_ntrulpr857: &[u8; 11usize] = b"ntrulpr857\0";
pub const OQS_KEM_alg_ntruprime_ntrulpr1277: &[u8; 12usize] = b"ntrulpr1277\0";
pub const OQS_KEM_alg_ntruprime_sntrup653: &[u8; 10usize] = b"sntrup653\0";
pub const OQS_KEM_alg_ntruprime_sntrup761: &[u8; 10usize] = b"sntrup761\0";
pub const OQS_KEM_alg_ntruprime_sntrup857: &[u8; 10usize] = b"sntrup857\0";
pub const OQS_KEM_alg_ntruprime_sntrup1277: &[u8; 11usize] = b"sntrup1277\0";
pub const OQS_KEM_alg_saber_lightsaber: &[u8; 15usize] = b"LightSaber-KEM\0";
pub const OQS_KEM_alg_saber_saber: &[u8; 10usize] = b"Saber-KEM\0";
pub const OQS_KEM_alg_saber_firesaber: &[u8; 14usize] = b"FireSaber-KEM\0";
pub const OQS_KEM_alg_frodokem_640_aes: &[u8; 17usize] = b"FrodoKEM-640-AES\0";
pub const OQS_KEM_alg_frodokem_640_shake: &[u8; 19usize] = b"FrodoKEM-640-SHAKE\0";
pub const OQS_KEM_alg_frodokem_976_aes: &[u8; 17usize] = b"FrodoKEM-976-AES\0";
pub const OQS_KEM_alg_frodokem_976_shake: &[u8; 19usize] = b"FrodoKEM-976-SHAKE\0";
pub const OQS_KEM_alg_frodokem_1344_aes: &[u8; 18usize] = b"FrodoKEM-1344-AES\0";
pub const OQS_KEM_alg_frodokem_1344_shake: &[u8; 20usize] = b"FrodoKEM-1344-SHAKE\0";
pub const OQS_KEM_algs_length: u32 = 44;
pub const OQS_KEM_bike_l1_length_secret_key: u32 = 5223;
pub const OQS_KEM_bike_l1_length_public_key: u32 = 1541;
pub const OQS_KEM_bike_l1_length_ciphertext: u32 = 1573;
pub const OQS_KEM_bike_l1_length_shared_secret: u32 = 32;
pub const OQS_KEM_bike_l3_length_secret_key: u32 = 10105;
pub const OQS_KEM_bike_l3_length_public_key: u32 = 3083;
pub const OQS_KEM_bike_l3_length_ciphertext: u32 = 3115;
pub const OQS_KEM_bike_l3_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_348864_length_public_key: u32 = 261120;
pub const OQS_KEM_classic_mceliece_348864_length_secret_key: u32 = 6452;
pub const OQS_KEM_classic_mceliece_348864_length_ciphertext: u32 = 128;
pub const OQS_KEM_classic_mceliece_348864_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_348864f_length_public_key: u32 = 261120;
pub const OQS_KEM_classic_mceliece_348864f_length_secret_key: u32 = 6452;
pub const OQS_KEM_classic_mceliece_348864f_length_ciphertext: u32 = 128;
pub const OQS_KEM_classic_mceliece_348864f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_460896_length_public_key: u32 = 524160;
pub const OQS_KEM_classic_mceliece_460896_length_secret_key: u32 = 13568;
pub const OQS_KEM_classic_mceliece_460896_length_ciphertext: u32 = 188;
pub const OQS_KEM_classic_mceliece_460896_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_460896f_length_public_key: u32 = 524160;
pub const OQS_KEM_classic_mceliece_460896f_length_secret_key: u32 = 13568;
pub const OQS_KEM_classic_mceliece_460896f_length_ciphertext: u32 = 188;
pub const OQS_KEM_classic_mceliece_460896f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6688128_length_public_key: u32 = 1044992;
pub const OQS_KEM_classic_mceliece_6688128_length_secret_key: u32 = 13892;
pub const OQS_KEM_classic_mceliece_6688128_length_ciphertext: u32 = 240;
pub const OQS_KEM_classic_mceliece_6688128_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6688128f_length_public_key: u32 = 1044992;
pub const OQS_KEM_classic_mceliece_6688128f_length_secret_key: u32 = 13892;
pub const OQS_KEM_classic_mceliece_6688128f_length_ciphertext: u32 = 240;
pub const OQS_KEM_classic_mceliece_6688128f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6960119_length_public_key: u32 = 1047319;
pub const OQS_KEM_classic_mceliece_6960119_length_secret_key: u32 = 13908;
pub const OQS_KEM_classic_mceliece_6960119_length_ciphertext: u32 = 226;
pub const OQS_KEM_classic_mceliece_6960119_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6960119f_length_public_key: u32 = 1047319;
pub const OQS_KEM_classic_mceliece_6960119f_length_secret_key: u32 = 13908;
pub const OQS_KEM_classic_mceliece_6960119f_length_ciphertext: u32 = 226;
pub const OQS_KEM_classic_mceliece_6960119f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_8192128_length_public_key: u32 = 1357824;
pub const OQS_KEM_classic_mceliece_8192128_length_secret_key: u32 = 14080;
pub const OQS_KEM_classic_mceliece_8192128_length_ciphertext: u32 = 240;
pub const OQS_KEM_classic_mceliece_8192128_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_8192128f_length_public_key: u32 = 1357824;
pub const OQS_KEM_classic_mceliece_8192128f_length_secret_key: u32 = 14080;
pub const OQS_KEM_classic_mceliece_8192128f_length_ciphertext: u32 = 240;
pub const OQS_KEM_classic_mceliece_8192128f_length_shared_secret: u32 = 32;
pub const OQS_KEM_hqc_128_length_public_key: u32 = 2249;
pub const OQS_KEM_hqc_128_length_secret_key: u32 = 2289;
pub const OQS_KEM_hqc_128_length_ciphertext: u32 = 4481;
pub const OQS_KEM_hqc_128_length_shared_secret: u32 = 64;
pub const OQS_KEM_hqc_192_length_public_key: u32 = 4522;
pub const OQS_KEM_hqc_192_length_secret_key: u32 = 4562;
pub const OQS_KEM_hqc_192_length_ciphertext: u32 = 9026;
pub const OQS_KEM_hqc_192_length_shared_secret: u32 = 64;
pub const OQS_KEM_hqc_256_length_public_key: u32 = 7245;
pub const OQS_KEM_hqc_256_length_secret_key: u32 = 7285;
pub const OQS_KEM_hqc_256_length_ciphertext: u32 = 14469;
pub const OQS_KEM_hqc_256_length_shared_secret: u32 = 64;
pub const OQS_KEM_kyber_512_length_public_key: u32 = 800;
pub const OQS_KEM_kyber_512_length_secret_key: u32 = 1632;
pub const OQS_KEM_kyber_512_length_ciphertext: u32 = 768;
pub const OQS_KEM_kyber_512_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_768_length_public_key: u32 = 1184;
pub const OQS_KEM_kyber_768_length_secret_key: u32 = 2400;
pub const OQS_KEM_kyber_768_length_ciphertext: u32 = 1088;
pub const OQS_KEM_kyber_768_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_1024_length_public_key: u32 = 1568;
pub const OQS_KEM_kyber_1024_length_secret_key: u32 = 3168;
pub const OQS_KEM_kyber_1024_length_ciphertext: u32 = 1568;
pub const OQS_KEM_kyber_1024_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_512_90s_length_public_key: u32 = 800;
pub const OQS_KEM_kyber_512_90s_length_secret_key: u32 = 1632;
pub const OQS_KEM_kyber_512_90s_length_ciphertext: u32 = 768;
pub const OQS_KEM_kyber_512_90s_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_768_90s_length_public_key: u32 = 1184;
pub const OQS_KEM_kyber_768_90s_length_secret_key: u32 = 2400;
pub const OQS_KEM_kyber_768_90s_length_ciphertext: u32 = 1088;
pub const OQS_KEM_kyber_768_90s_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_1024_90s_length_public_key: u32 = 1568;
pub const OQS_KEM_kyber_1024_90s_length_secret_key: u32 = 3168;
pub const OQS_KEM_kyber_1024_90s_length_ciphertext: u32 = 1568;
pub const OQS_KEM_kyber_1024_90s_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntru_hps2048509_length_public_key: u32 = 699;
pub const OQS_KEM_ntru_hps2048509_length_secret_key: u32 = 935;
pub const OQS_KEM_ntru_hps2048509_length_ciphertext: u32 = 699;
pub const OQS_KEM_ntru_hps2048509_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntru_hps2048677_length_public_key: u32 = 930;
pub const OQS_KEM_ntru_hps2048677_length_secret_key: u32 = 1234;
pub const OQS_KEM_ntru_hps2048677_length_ciphertext: u32 = 930;
pub const OQS_KEM_ntru_hps2048677_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntru_hps4096821_length_public_key: u32 = 1230;
pub const OQS_KEM_ntru_hps4096821_length_secret_key: u32 = 1590;
pub const OQS_KEM_ntru_hps4096821_length_ciphertext: u32 = 1230;
pub const OQS_KEM_ntru_hps4096821_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntru_hps40961229_length_public_key: u32 = 1842;
pub const OQS_KEM_ntru_hps40961229_length_secret_key: u32 = 2366;
pub const OQS_KEM_ntru_hps40961229_length_ciphertext: u32 = 1842;
pub const OQS_KEM_ntru_hps40961229_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntru_hrss701_length_public_key: u32 = 1138;
pub const OQS_KEM_ntru_hrss701_length_secret_key: u32 = 1450;
pub const OQS_KEM_ntru_hrss701_length_ciphertext: u32 = 1138;
pub const OQS_KEM_ntru_hrss701_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntru_hrss1373_length_public_key: u32 = 2401;
pub const OQS_KEM_ntru_hrss1373_length_secret_key: u32 = 2983;
pub const OQS_KEM_ntru_hrss1373_length_ciphertext: u32 = 2401;
pub const OQS_KEM_ntru_hrss1373_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_ntrulpr653_length_public_key: u32 = 897;
pub const OQS_KEM_ntruprime_ntrulpr653_length_secret_key: u32 = 1125;
pub const OQS_KEM_ntruprime_ntrulpr653_length_ciphertext: u32 = 1025;
pub const OQS_KEM_ntruprime_ntrulpr653_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_ntrulpr761_length_public_key: u32 = 1039;
pub const OQS_KEM_ntruprime_ntrulpr761_length_secret_key: u32 = 1294;
pub const OQS_KEM_ntruprime_ntrulpr761_length_ciphertext: u32 = 1167;
pub const OQS_KEM_ntruprime_ntrulpr761_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_ntrulpr857_length_public_key: u32 = 1184;
pub const OQS_KEM_ntruprime_ntrulpr857_length_secret_key: u32 = 1463;
pub const OQS_KEM_ntruprime_ntrulpr857_length_ciphertext: u32 = 1312;
pub const OQS_KEM_ntruprime_ntrulpr857_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_ntrulpr1277_length_public_key: u32 = 1847;
pub const OQS_KEM_ntruprime_ntrulpr1277_length_secret_key: u32 = 2231;
pub const OQS_KEM_ntruprime_ntrulpr1277_length_ciphertext: u32 = 1975;
pub const OQS_KEM_ntruprime_ntrulpr1277_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_sntrup653_length_public_key: u32 = 994;
pub const OQS_KEM_ntruprime_sntrup653_length_secret_key: u32 = 1518;
pub const OQS_KEM_ntruprime_sntrup653_length_ciphertext: u32 = 897;
pub const OQS_KEM_ntruprime_sntrup653_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_sntrup761_length_public_key: u32 = 1158;
pub const OQS_KEM_ntruprime_sntrup761_length_secret_key: u32 = 1763;
pub const OQS_KEM_ntruprime_sntrup761_length_ciphertext: u32 = 1039;
pub const OQS_KEM_ntruprime_sntrup761_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_sntrup857_length_public_key: u32 = 1322;
pub const OQS_KEM_ntruprime_sntrup857_length_secret_key: u32 = 1999;
pub const OQS_KEM_ntruprime_sntrup857_length_ciphertext: u32 = 1184;
pub const OQS_KEM_ntruprime_sntrup857_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_sntrup1277_length_public_key: u32 = 2067;
pub const OQS_KEM_ntruprime_sntrup1277_length_secret_key: u32 = 3059;
pub const OQS_KEM_ntruprime_sntrup1277_length_ciphertext: u32 = 1847;
pub const OQS_KEM_ntruprime_sntrup1277_length_shared_secret: u32 = 32;
pub const OQS_KEM_saber_lightsaber_length_public_key: u32 = 672;
pub const OQS_KEM_saber_lightsaber_length_secret_key: u32 = 1568;
pub const OQS_KEM_saber_lightsaber_length_ciphertext: u32 = 736;
pub const OQS_KEM_saber_lightsaber_length_shared_secret: u32 = 32;
pub const OQS_KEM_saber_saber_length_public_key: u32 = 992;
pub const OQS_KEM_saber_saber_length_secret_key: u32 = 2304;
pub const OQS_KEM_saber_saber_length_ciphertext: u32 = 1088;
pub const OQS_KEM_saber_saber_length_shared_secret: u32 = 32;
pub const OQS_KEM_saber_firesaber_length_public_key: u32 = 1312;
pub const OQS_KEM_saber_firesaber_length_secret_key: u32 = 3040;
pub const OQS_KEM_saber_firesaber_length_ciphertext: u32 = 1472;
pub const OQS_KEM_saber_firesaber_length_shared_secret: u32 = 32;
pub const OQS_KEM_frodokem_640_aes_length_public_key: u32 = 9616;
pub const OQS_KEM_frodokem_640_aes_length_secret_key: u32 = 19888;
pub const OQS_KEM_frodokem_640_aes_length_ciphertext: u32 = 9720;
pub const OQS_KEM_frodokem_640_aes_length_shared_secret: u32 = 16;
pub const OQS_KEM_frodokem_640_shake_length_public_key: u32 = 9616;
pub const OQS_KEM_frodokem_640_shake_length_secret_key: u32 = 19888;
pub const OQS_KEM_frodokem_640_shake_length_ciphertext: u32 = 9720;
pub const OQS_KEM_frodokem_640_shake_length_shared_secret: u32 = 16;
pub const OQS_KEM_frodokem_976_aes_length_public_key: u32 = 15632;
pub const OQS_KEM_frodokem_976_aes_length_secret_key: u32 = 31296;
pub const OQS_KEM_frodokem_976_aes_length_ciphertext: u32 = 15744;
pub const OQS_KEM_frodokem_976_aes_length_shared_secret: u32 = 24;
pub const OQS_KEM_frodokem_976_shake_length_public_key: u32 = 15632;
pub const OQS_KEM_frodokem_976_shake_length_secret_key: u32 = 31296;
pub const OQS_KEM_frodokem_976_shake_length_ciphertext: u32 = 15744;
pub const OQS_KEM_frodokem_976_shake_length_shared_secret: u32 = 24;
pub const OQS_KEM_frodokem_1344_aes_length_public_key: u32 = 21520;
pub const OQS_KEM_frodokem_1344_aes_length_secret_key: u32 = 43088;
pub const OQS_KEM_frodokem_1344_aes_length_ciphertext: u32 = 21632;
pub const OQS_KEM_frodokem_1344_aes_length_shared_secret: u32 = 32;
pub const OQS_KEM_frodokem_1344_shake_length_public_key: u32 = 21520;
pub const OQS_KEM_frodokem_1344_shake_length_secret_key: u32 = 43088;
pub const OQS_KEM_frodokem_1344_shake_length_ciphertext: u32 = 21632;
pub const OQS_KEM_frodokem_1344_shake_length_shared_secret: u32 = 32;
extern "C" {
    pub fn OQS_KEM_alg_identifier(i: usize) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OQS_KEM_alg_count() -> ::libc::c_int;
}
extern "C" {
    pub fn OQS_KEM_alg_is_enabled(method_name: *const ::libc::c_char) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OQS_KEM {
    pub method_name: *const ::libc::c_char,
    pub alg_version: *const ::libc::c_char,
    pub claimed_nist_level: u8,
    pub ind_cca: bool,
    pub length_public_key: usize,
    pub length_secret_key: usize,
    pub length_ciphertext: usize,
    pub length_shared_secret: usize,
    pub keypair: ::core::option::Option<
        unsafe extern "C" fn(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS,
    >,
    pub encaps: ::core::option::Option<
        unsafe extern "C" fn(
            ciphertext: *mut u8,
            shared_secret: *mut u8,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub decaps: ::core::option::Option<
        unsafe extern "C" fn(
            shared_secret: *mut u8,
            ciphertext: *const u8,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
}
#[test]
fn bindgen_test_layout_OQS_KEM() {
    assert_eq!(
        ::core::mem::size_of::<OQS_KEM>(),
        80usize,
        concat!("Size of: ", stringify!(OQS_KEM))
    );
    assert_eq!(
        ::core::mem::align_of::<OQS_KEM>(),
        8usize,
        concat!("Alignment of ", stringify!(OQS_KEM))
    );
    fn test_field_method_name() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).method_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(method_name)
            )
        );
    }
    test_field_method_name();
    fn test_field_alg_version() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).alg_version) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(alg_version)
            )
        );
    }
    test_field_alg_version();
    fn test_field_claimed_nist_level() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).claimed_nist_level) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(claimed_nist_level)
            )
        );
    }
    test_field_claimed_nist_level();
    fn test_field_ind_cca() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ind_cca) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(ind_cca)
            )
        );
    }
    test_field_ind_cca();
    fn test_field_length_public_key() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_public_key) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(length_public_key)
            )
        );
    }
    test_field_length_public_key();
    fn test_field_length_secret_key() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_secret_key) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(length_secret_key)
            )
        );
    }
    test_field_length_secret_key();
    fn test_field_length_ciphertext() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_ciphertext) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(length_ciphertext)
            )
        );
    }
    test_field_length_ciphertext();
    fn test_field_length_shared_secret() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_shared_secret) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(length_shared_secret)
            )
        );
    }
    test_field_length_shared_secret();
    fn test_field_keypair() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).keypair) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(keypair)
            )
        );
    }
    test_field_keypair();
    fn test_field_encaps() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).encaps) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(encaps)
            )
        );
    }
    test_field_encaps();
    fn test_field_decaps() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_KEM>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).decaps) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_KEM),
                "::",
                stringify!(decaps)
            )
        );
    }
    test_field_decaps();
}
extern "C" {
    pub fn OQS_KEM_new(method_name: *const ::libc::c_char) -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_keypair(
        kem: *const OQS_KEM,
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_encaps(
        kem: *const OQS_KEM,
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_decaps(
        kem: *const OQS_KEM,
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_free(kem: *mut OQS_KEM);
}
extern "C" {
    pub fn OQS_KEM_bike_l1_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_bike_l1_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_bike_l1_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_bike_l1_decaps(
        shared_secret: *mut u8,
        ciphertext: *const ::libc::c_uchar,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_bike_l3_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_bike_l3_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_bike_l3_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_bike_l3_decaps(
        shared_secret: *mut u8,
        ciphertext: *const ::libc::c_uchar,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_128_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_hqc_128_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_128_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_128_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_192_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_hqc_192_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_192_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_192_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_256_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_hqc_256_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_256_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_hqc_256_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_90s_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_90s_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_90s_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_512_90s_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_90s_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_90s_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_90s_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_768_90s_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_90s_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_90s_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_90s_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_kyber_1024_90s_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048509_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048509_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048509_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048509_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048677_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048677_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048677_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps2048677_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps4096821_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps4096821_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps4096821_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps4096821_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps40961229_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps40961229_keypair(public_key: *mut u8, secret_key: *mut u8)
        -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps40961229_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hps40961229_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss701_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss701_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss701_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss701_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss1373_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss1373_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss1373_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntru_hrss1373_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr653_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr653_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr653_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr653_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr761_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr761_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr761_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr761_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr857_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr857_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr857_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr857_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr1277_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr1277_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr1277_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_ntrulpr1277_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup653_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup653_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup653_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup653_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup857_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup857_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup857_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup857_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup1277_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup1277_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup1277_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup1277_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_lightsaber_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_saber_lightsaber_keypair(public_key: *mut u8, secret_key: *mut u8)
        -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_lightsaber_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_lightsaber_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_saber_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_saber_saber_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_saber_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_saber_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_firesaber_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_saber_firesaber_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_firesaber_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_saber_firesaber_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_keypair(public_key: *mut u8, secret_key: *mut u8)
        -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_keypair(public_key: *mut u8, secret_key: *mut u8)
        -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_new() -> *mut OQS_KEM;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
