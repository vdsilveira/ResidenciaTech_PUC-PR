/* automatically generated by rust-bindgen 0.60.1 */

pub const OQS_SIG_alg_picnic_L1_FS: &[u8; 13usize] = b"picnic_L1_FS\0";
pub const OQS_SIG_alg_picnic_L1_UR: &[u8; 13usize] = b"picnic_L1_UR\0";
pub const OQS_SIG_alg_picnic_L1_full: &[u8; 15usize] = b"picnic_L1_full\0";
pub const OQS_SIG_alg_picnic_L3_FS: &[u8; 13usize] = b"picnic_L3_FS\0";
pub const OQS_SIG_alg_picnic_L3_UR: &[u8; 13usize] = b"picnic_L3_UR\0";
pub const OQS_SIG_alg_picnic_L3_full: &[u8; 15usize] = b"picnic_L3_full\0";
pub const OQS_SIG_alg_picnic_L5_FS: &[u8; 13usize] = b"picnic_L5_FS\0";
pub const OQS_SIG_alg_picnic_L5_UR: &[u8; 13usize] = b"picnic_L5_UR\0";
pub const OQS_SIG_alg_picnic_L5_full: &[u8; 15usize] = b"picnic_L5_full\0";
pub const OQS_SIG_alg_picnic3_L1: &[u8; 11usize] = b"picnic3_L1\0";
pub const OQS_SIG_alg_picnic3_L3: &[u8; 11usize] = b"picnic3_L3\0";
pub const OQS_SIG_alg_picnic3_L5: &[u8; 11usize] = b"picnic3_L5\0";
pub const OQS_SIG_alg_dilithium_2: &[u8; 11usize] = b"Dilithium2\0";
pub const OQS_SIG_alg_dilithium_3: &[u8; 11usize] = b"Dilithium3\0";
pub const OQS_SIG_alg_dilithium_5: &[u8; 11usize] = b"Dilithium5\0";
pub const OQS_SIG_alg_dilithium_2_aes: &[u8; 15usize] = b"Dilithium2-AES\0";
pub const OQS_SIG_alg_dilithium_3_aes: &[u8; 15usize] = b"Dilithium3-AES\0";
pub const OQS_SIG_alg_dilithium_5_aes: &[u8; 15usize] = b"Dilithium5-AES\0";
pub const OQS_SIG_alg_falcon_512: &[u8; 11usize] = b"Falcon-512\0";
pub const OQS_SIG_alg_falcon_1024: &[u8; 12usize] = b"Falcon-1024\0";
pub const OQS_SIG_alg_rainbow_III_classic: &[u8; 20usize] = b"Rainbow-III-Classic\0";
pub const OQS_SIG_alg_rainbow_III_circumzenithal: &[u8; 27usize] = b"Rainbow-III-Circumzenithal\0";
pub const OQS_SIG_alg_rainbow_III_compressed: &[u8; 23usize] = b"Rainbow-III-Compressed\0";
pub const OQS_SIG_alg_rainbow_V_classic: &[u8; 18usize] = b"Rainbow-V-Classic\0";
pub const OQS_SIG_alg_rainbow_V_circumzenithal: &[u8; 25usize] = b"Rainbow-V-Circumzenithal\0";
pub const OQS_SIG_alg_rainbow_V_compressed: &[u8; 21usize] = b"Rainbow-V-Compressed\0";
pub const OQS_SIG_alg_sphincs_haraka_128f_robust: &[u8; 28usize] = b"SPHINCS+-Haraka-128f-robust\0";
pub const OQS_SIG_alg_sphincs_haraka_128f_simple: &[u8; 28usize] = b"SPHINCS+-Haraka-128f-simple\0";
pub const OQS_SIG_alg_sphincs_haraka_128s_robust: &[u8; 28usize] = b"SPHINCS+-Haraka-128s-robust\0";
pub const OQS_SIG_alg_sphincs_haraka_128s_simple: &[u8; 28usize] = b"SPHINCS+-Haraka-128s-simple\0";
pub const OQS_SIG_alg_sphincs_haraka_192f_robust: &[u8; 28usize] = b"SPHINCS+-Haraka-192f-robust\0";
pub const OQS_SIG_alg_sphincs_haraka_192f_simple: &[u8; 28usize] = b"SPHINCS+-Haraka-192f-simple\0";
pub const OQS_SIG_alg_sphincs_haraka_192s_robust: &[u8; 28usize] = b"SPHINCS+-Haraka-192s-robust\0";
pub const OQS_SIG_alg_sphincs_haraka_192s_simple: &[u8; 28usize] = b"SPHINCS+-Haraka-192s-simple\0";
pub const OQS_SIG_alg_sphincs_haraka_256f_robust: &[u8; 28usize] = b"SPHINCS+-Haraka-256f-robust\0";
pub const OQS_SIG_alg_sphincs_haraka_256f_simple: &[u8; 28usize] = b"SPHINCS+-Haraka-256f-simple\0";
pub const OQS_SIG_alg_sphincs_haraka_256s_robust: &[u8; 28usize] = b"SPHINCS+-Haraka-256s-robust\0";
pub const OQS_SIG_alg_sphincs_haraka_256s_simple: &[u8; 28usize] = b"SPHINCS+-Haraka-256s-simple\0";
pub const OQS_SIG_alg_sphincs_sha256_128f_robust: &[u8; 28usize] = b"SPHINCS+-SHA256-128f-robust\0";
pub const OQS_SIG_alg_sphincs_sha256_128f_simple: &[u8; 28usize] = b"SPHINCS+-SHA256-128f-simple\0";
pub const OQS_SIG_alg_sphincs_sha256_128s_robust: &[u8; 28usize] = b"SPHINCS+-SHA256-128s-robust\0";
pub const OQS_SIG_alg_sphincs_sha256_128s_simple: &[u8; 28usize] = b"SPHINCS+-SHA256-128s-simple\0";
pub const OQS_SIG_alg_sphincs_sha256_192f_robust: &[u8; 28usize] = b"SPHINCS+-SHA256-192f-robust\0";
pub const OQS_SIG_alg_sphincs_sha256_192f_simple: &[u8; 28usize] = b"SPHINCS+-SHA256-192f-simple\0";
pub const OQS_SIG_alg_sphincs_sha256_192s_robust: &[u8; 28usize] = b"SPHINCS+-SHA256-192s-robust\0";
pub const OQS_SIG_alg_sphincs_sha256_192s_simple: &[u8; 28usize] = b"SPHINCS+-SHA256-192s-simple\0";
pub const OQS_SIG_alg_sphincs_sha256_256f_robust: &[u8; 28usize] = b"SPHINCS+-SHA256-256f-robust\0";
pub const OQS_SIG_alg_sphincs_sha256_256f_simple: &[u8; 28usize] = b"SPHINCS+-SHA256-256f-simple\0";
pub const OQS_SIG_alg_sphincs_sha256_256s_robust: &[u8; 28usize] = b"SPHINCS+-SHA256-256s-robust\0";
pub const OQS_SIG_alg_sphincs_sha256_256s_simple: &[u8; 28usize] = b"SPHINCS+-SHA256-256s-simple\0";
pub const OQS_SIG_alg_sphincs_shake256_128f_robust: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-128f-robust\0";
pub const OQS_SIG_alg_sphincs_shake256_128f_simple: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-128f-simple\0";
pub const OQS_SIG_alg_sphincs_shake256_128s_robust: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-128s-robust\0";
pub const OQS_SIG_alg_sphincs_shake256_128s_simple: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-128s-simple\0";
pub const OQS_SIG_alg_sphincs_shake256_192f_robust: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-192f-robust\0";
pub const OQS_SIG_alg_sphincs_shake256_192f_simple: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-192f-simple\0";
pub const OQS_SIG_alg_sphincs_shake256_192s_robust: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-192s-robust\0";
pub const OQS_SIG_alg_sphincs_shake256_192s_simple: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-192s-simple\0";
pub const OQS_SIG_alg_sphincs_shake256_256f_robust: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-256f-robust\0";
pub const OQS_SIG_alg_sphincs_shake256_256f_simple: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-256f-simple\0";
pub const OQS_SIG_alg_sphincs_shake256_256s_robust: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-256s-robust\0";
pub const OQS_SIG_alg_sphincs_shake256_256s_simple: &[u8; 30usize] =
    b"SPHINCS+-SHAKE256-256s-simple\0";
pub const OQS_SIG_algs_length: u32 = 62;
pub const OQS_SIG_picnic_L1_FS_length_public_key: u32 = 33;
pub const OQS_SIG_picnic_L1_FS_length_secret_key: u32 = 49;
pub const OQS_SIG_picnic_L1_FS_length_signature: u32 = 34036;
pub const OQS_SIG_picnic_L1_UR_length_public_key: u32 = 33;
pub const OQS_SIG_picnic_L1_UR_length_secret_key: u32 = 49;
pub const OQS_SIG_picnic_L1_UR_length_signature: u32 = 53965;
pub const OQS_SIG_picnic_L1_full_length_public_key: u32 = 35;
pub const OQS_SIG_picnic_L1_full_length_secret_key: u32 = 52;
pub const OQS_SIG_picnic_L1_full_length_signature: u32 = 32065;
pub const OQS_SIG_picnic_L3_FS_length_public_key: u32 = 49;
pub const OQS_SIG_picnic_L3_FS_length_secret_key: u32 = 73;
pub const OQS_SIG_picnic_L3_FS_length_signature: u32 = 76776;
pub const OQS_SIG_picnic_L3_UR_length_public_key: u32 = 49;
pub const OQS_SIG_picnic_L3_UR_length_secret_key: u32 = 73;
pub const OQS_SIG_picnic_L3_UR_length_signature: u32 = 121849;
pub const OQS_SIG_picnic_L3_full_length_public_key: u32 = 49;
pub const OQS_SIG_picnic_L3_full_length_secret_key: u32 = 73;
pub const OQS_SIG_picnic_L3_full_length_signature: u32 = 71183;
pub const OQS_SIG_picnic_L5_FS_length_public_key: u32 = 65;
pub const OQS_SIG_picnic_L5_FS_length_secret_key: u32 = 97;
pub const OQS_SIG_picnic_L5_FS_length_signature: u32 = 132860;
pub const OQS_SIG_picnic_L5_UR_length_public_key: u32 = 65;
pub const OQS_SIG_picnic_L5_UR_length_secret_key: u32 = 97;
pub const OQS_SIG_picnic_L5_UR_length_signature: u32 = 209510;
pub const OQS_SIG_picnic_L5_full_length_public_key: u32 = 65;
pub const OQS_SIG_picnic_L5_full_length_secret_key: u32 = 97;
pub const OQS_SIG_picnic_L5_full_length_signature: u32 = 126290;
pub const OQS_SIG_picnic3_L1_length_public_key: u32 = 35;
pub const OQS_SIG_picnic3_L1_length_secret_key: u32 = 52;
pub const OQS_SIG_picnic3_L1_length_signature: u32 = 14612;
pub const OQS_SIG_picnic3_L3_length_public_key: u32 = 49;
pub const OQS_SIG_picnic3_L3_length_secret_key: u32 = 73;
pub const OQS_SIG_picnic3_L3_length_signature: u32 = 35028;
pub const OQS_SIG_picnic3_L5_length_public_key: u32 = 65;
pub const OQS_SIG_picnic3_L5_length_secret_key: u32 = 97;
pub const OQS_SIG_picnic3_L5_length_signature: u32 = 61028;
pub const OQS_SIG_dilithium_2_length_public_key: u32 = 1312;
pub const OQS_SIG_dilithium_2_length_secret_key: u32 = 2528;
pub const OQS_SIG_dilithium_2_length_signature: u32 = 2420;
pub const OQS_SIG_dilithium_3_length_public_key: u32 = 1952;
pub const OQS_SIG_dilithium_3_length_secret_key: u32 = 4000;
pub const OQS_SIG_dilithium_3_length_signature: u32 = 3293;
pub const OQS_SIG_dilithium_5_length_public_key: u32 = 2592;
pub const OQS_SIG_dilithium_5_length_secret_key: u32 = 4864;
pub const OQS_SIG_dilithium_5_length_signature: u32 = 4595;
pub const OQS_SIG_dilithium_2_aes_length_public_key: u32 = 1312;
pub const OQS_SIG_dilithium_2_aes_length_secret_key: u32 = 2528;
pub const OQS_SIG_dilithium_2_aes_length_signature: u32 = 2420;
pub const OQS_SIG_dilithium_3_aes_length_public_key: u32 = 1952;
pub const OQS_SIG_dilithium_3_aes_length_secret_key: u32 = 4000;
pub const OQS_SIG_dilithium_3_aes_length_signature: u32 = 3293;
pub const OQS_SIG_dilithium_5_aes_length_public_key: u32 = 2592;
pub const OQS_SIG_dilithium_5_aes_length_secret_key: u32 = 4864;
pub const OQS_SIG_dilithium_5_aes_length_signature: u32 = 4595;
pub const OQS_SIG_falcon_512_length_public_key: u32 = 897;
pub const OQS_SIG_falcon_512_length_secret_key: u32 = 1281;
pub const OQS_SIG_falcon_512_length_signature: u32 = 690;
pub const OQS_SIG_falcon_1024_length_public_key: u32 = 1793;
pub const OQS_SIG_falcon_1024_length_secret_key: u32 = 2305;
pub const OQS_SIG_falcon_1024_length_signature: u32 = 1330;
pub const OQS_SIG_rainbow_III_classic_length_public_key: u32 = 882080;
pub const OQS_SIG_rainbow_III_classic_length_secret_key: u32 = 626048;
pub const OQS_SIG_rainbow_III_classic_length_signature: u32 = 164;
pub const OQS_SIG_rainbow_III_circumzenithal_length_public_key: u32 = 264608;
pub const OQS_SIG_rainbow_III_circumzenithal_length_secret_key: u32 = 626048;
pub const OQS_SIG_rainbow_III_circumzenithal_length_signature: u32 = 164;
pub const OQS_SIG_rainbow_III_compressed_length_public_key: u32 = 264608;
pub const OQS_SIG_rainbow_III_compressed_length_secret_key: u32 = 64;
pub const OQS_SIG_rainbow_III_compressed_length_signature: u32 = 164;
pub const OQS_SIG_rainbow_V_classic_length_public_key: u32 = 1930600;
pub const OQS_SIG_rainbow_V_classic_length_secret_key: u32 = 1408736;
pub const OQS_SIG_rainbow_V_classic_length_signature: u32 = 212;
pub const OQS_SIG_rainbow_V_circumzenithal_length_public_key: u32 = 536136;
pub const OQS_SIG_rainbow_V_circumzenithal_length_secret_key: u32 = 1408736;
pub const OQS_SIG_rainbow_V_circumzenithal_length_signature: u32 = 212;
pub const OQS_SIG_rainbow_V_compressed_length_public_key: u32 = 536136;
pub const OQS_SIG_rainbow_V_compressed_length_secret_key: u32 = 64;
pub const OQS_SIG_rainbow_V_compressed_length_signature: u32 = 212;
pub const OQS_SIG_sphincs_haraka_128f_robust_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_haraka_128f_robust_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_128f_robust_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_haraka_128f_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_haraka_128f_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_128f_simple_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_haraka_128s_robust_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_haraka_128s_robust_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_128s_robust_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_haraka_128s_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_haraka_128s_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_128s_simple_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_haraka_192f_robust_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_haraka_192f_robust_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_haraka_192f_robust_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_haraka_192f_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_haraka_192f_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_haraka_192f_simple_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_haraka_192s_robust_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_haraka_192s_robust_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_haraka_192s_robust_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_haraka_192s_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_haraka_192s_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_haraka_192s_simple_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_haraka_256f_robust_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_256f_robust_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_haraka_256f_robust_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_haraka_256f_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_256f_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_haraka_256f_simple_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_haraka_256s_robust_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_256s_robust_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_haraka_256s_robust_length_signature: u32 = 29792;
pub const OQS_SIG_sphincs_haraka_256s_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_haraka_256s_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_haraka_256s_simple_length_signature: u32 = 29792;
pub const OQS_SIG_sphincs_sha256_128f_robust_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_sha256_128f_robust_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_128f_robust_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_sha256_128f_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_sha256_128f_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_128f_simple_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_sha256_128s_robust_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_sha256_128s_robust_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_128s_robust_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_sha256_128s_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_sha256_128s_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_128s_simple_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_sha256_192f_robust_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_sha256_192f_robust_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_sha256_192f_robust_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_sha256_192f_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_sha256_192f_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_sha256_192f_simple_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_sha256_192s_robust_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_sha256_192s_robust_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_sha256_192s_robust_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_sha256_192s_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_sha256_192s_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_sha256_192s_simple_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_sha256_256f_robust_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_256f_robust_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_sha256_256f_robust_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_sha256_256f_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_256f_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_sha256_256f_simple_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_sha256_256s_robust_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_256s_robust_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_sha256_256s_robust_length_signature: u32 = 29792;
pub const OQS_SIG_sphincs_sha256_256s_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_sha256_256s_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_sha256_256s_simple_length_signature: u32 = 29792;
pub const OQS_SIG_sphincs_shake256_128f_robust_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_shake256_128f_robust_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_128f_robust_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_shake256_128f_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_shake256_128f_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_128f_simple_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_shake256_128s_robust_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_shake256_128s_robust_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_128s_robust_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_shake256_128s_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_shake256_128s_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_128s_simple_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_shake256_192f_robust_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_shake256_192f_robust_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_shake256_192f_robust_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_shake256_192f_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_shake256_192f_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_shake256_192f_simple_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_shake256_192s_robust_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_shake256_192s_robust_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_shake256_192s_robust_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_shake256_192s_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_shake256_192s_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_shake256_192s_simple_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_shake256_256f_robust_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_256f_robust_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_shake256_256f_robust_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_shake256_256f_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_256f_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_shake256_256f_simple_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_shake256_256s_robust_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_256s_robust_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_shake256_256s_robust_length_signature: u32 = 29792;
pub const OQS_SIG_sphincs_shake256_256s_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_shake256_256s_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_shake256_256s_simple_length_signature: u32 = 29792;
extern "C" {
    pub fn OQS_SIG_alg_identifier(i: usize) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OQS_SIG_alg_count() -> ::libc::c_int;
}
extern "C" {
    pub fn OQS_SIG_alg_is_enabled(method_name: *const ::libc::c_char) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OQS_SIG {
    pub method_name: *const ::libc::c_char,
    pub alg_version: *const ::libc::c_char,
    pub claimed_nist_level: u8,
    pub euf_cma: bool,
    pub length_public_key: usize,
    pub length_secret_key: usize,
    pub length_signature: usize,
    pub keypair: ::core::option::Option<
        unsafe extern "C" fn(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS,
    >,
    pub sign: ::core::option::Option<
        unsafe extern "C" fn(
            signature: *mut u8,
            signature_len: *mut usize,
            message: *const u8,
            message_len: usize,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub verify: ::core::option::Option<
        unsafe extern "C" fn(
            message: *const u8,
            message_len: usize,
            signature: *const u8,
            signature_len: usize,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
}
#[test]
fn bindgen_test_layout_OQS_SIG() {
    assert_eq!(
        ::core::mem::size_of::<OQS_SIG>(),
        72usize,
        concat!("Size of: ", stringify!(OQS_SIG))
    );
    assert_eq!(
        ::core::mem::align_of::<OQS_SIG>(),
        8usize,
        concat!("Alignment of ", stringify!(OQS_SIG))
    );
    fn test_field_method_name() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).method_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(method_name)
            )
        );
    }
    test_field_method_name();
    fn test_field_alg_version() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).alg_version) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(alg_version)
            )
        );
    }
    test_field_alg_version();
    fn test_field_claimed_nist_level() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).claimed_nist_level) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(claimed_nist_level)
            )
        );
    }
    test_field_claimed_nist_level();
    fn test_field_euf_cma() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).euf_cma) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(euf_cma)
            )
        );
    }
    test_field_euf_cma();
    fn test_field_length_public_key() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_public_key) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(length_public_key)
            )
        );
    }
    test_field_length_public_key();
    fn test_field_length_secret_key() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_secret_key) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(length_secret_key)
            )
        );
    }
    test_field_length_secret_key();
    fn test_field_length_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).length_signature) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(length_signature)
            )
        );
    }
    test_field_length_signature();
    fn test_field_keypair() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).keypair) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(keypair)
            )
        );
    }
    test_field_keypair();
    fn test_field_sign() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sign) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(sign)
            )
        );
    }
    test_field_sign();
    fn test_field_verify() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<OQS_SIG>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).verify) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OQS_SIG),
                "::",
                stringify!(verify)
            )
        );
    }
    test_field_verify();
}
extern "C" {
    pub fn OQS_SIG_new(method_name: *const ::libc::c_char) -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_keypair(
        sig: *const OQS_SIG,
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sign(
        sig: *const OQS_SIG,
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_verify(
        sig: *const OQS_SIG,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_free(sig: *mut OQS_SIG);
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_FS_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_FS_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_FS_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_FS_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_UR_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_UR_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_UR_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_UR_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_full_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_full_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_full_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L1_full_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_FS_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_FS_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_FS_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_FS_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_UR_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_UR_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_UR_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_UR_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_full_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_full_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_full_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L3_full_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_FS_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_FS_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_FS_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_FS_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_UR_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_UR_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_UR_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_UR_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_full_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_full_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_full_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic_L5_full_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L1_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L1_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L1_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L1_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L3_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L3_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L3_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L3_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L5_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L5_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L5_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_picnic3_L5_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_aes_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_aes_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_aes_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_aes_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_aes_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_aes_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_aes_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_aes_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_aes_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_aes_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_aes_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_aes_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_classic_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_classic_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_classic_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_classic_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_circumzenithal_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_circumzenithal_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_circumzenithal_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_circumzenithal_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_compressed_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_compressed_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_compressed_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_III_compressed_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_classic_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_classic_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_classic_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_classic_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_circumzenithal_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_circumzenithal_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_circumzenithal_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_circumzenithal_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_compressed_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_compressed_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_compressed_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_rainbow_V_compressed_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_128s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_192s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_haraka_256s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_128s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_192s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha256_256s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_128s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_192s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_robust_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_robust_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_robust_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_robust_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake256_256s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
